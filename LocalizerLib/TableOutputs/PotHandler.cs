using System.Text;
using System.Text.Json;

namespace InkLocalizer.TableOutputs;

public class PotHandler (Localizer localizer, TableOutputOptions? options = null) {
	private readonly TableOutputOptions _options = options ?? new TableOutputOptions ();
	private static string EscapePoString (string input) {
		if (input.IndexOfAny (['\\', '"', '\n']) == -1)
			return input; // 无需转义
		return input.Replace ("\\", "\\\\").Replace ("\"", "\\\"").Replace ("\n", "\\n");
	}
	private void ExportDictionaryToPot (Dictionary<string, string> dict, string path) {
		// 预估大小：每条翻译大约 100 字节，初始容量设为合理值，避免多次扩容
		var sb = new StringBuilder (capacity: dict.Count * 100);

		// 写入 POT 头部
		sb.AppendLine ("# POT file generated by Godot");
		sb.AppendLine ("msgid \"\"");
		sb.AppendLine ("msgstr \"\"");
		sb.AppendLine ("\"Content-Type: text/plain; charset=UTF-8\\n\"");
		sb.AppendLine ();

		// 批量构建每个条目
		foreach (var kvp in dict) {
			var msgid = EscapePoString (kvp.Key);

			sb.Append ("msgid \"").Append (msgid).AppendLine ("\"");
			sb.AppendLine ("msgstr \"\"");
			sb.AppendLine ();
		}

		// 一次写入文件
		using var file = new FileStream (path, FileMode.Create, FileAccess.Write, FileShare.None);
		using var writer = new StreamWriter (file, Encoding.UTF8);
		writer.Write (sb.ToString ());
	}
	private void ExportDictionaryToPo (Dictionary<string, string> dict, string path,string languageCode) {
		// 预估大小：每条翻译大约 100 字节，初始容量设为合理值，避免多次扩容
		var sb = new StringBuilder (capacity: dict.Count * 100);

		// 写入 PO 头部
		sb.AppendLine($"# PO file for language: {languageCode}");
        sb.AppendLine("msgid \"\"");
        sb.AppendLine("msgstr \"\"");
        sb.AppendLine($"\"Language: {languageCode}\\n\"");
        sb.AppendLine("\"Content-Type: text/plain; charset=UTF-8\\n\"");
        sb.AppendLine();

		// 批量构建每个条目
		foreach (var kvp in dict)
        {
            string msgid = EscapePoString(kvp.Key);
            string msgstr = EscapePoString(kvp.Value);

            sb.AppendLine($"msgid \"{msgid}\"");
            sb.AppendLine($"msgstr \"{msgstr}\"");
            sb.AppendLine();
        }

		// 一次写入文件
		using var file = new FileStream (path, FileMode.Create, FileAccess.Write, FileShare.None);
		using var writer = new StreamWriter (file, Encoding.UTF8);
		writer.Write (sb.ToString ());
	}
	public void WriteStrings () {
		string outputFilePath = Path.GetFullPath (_options.OutputFilePath);

		try {
			ExportDictionaryToPot (localizer.Strings, outputFilePath);
			var poDirectory = Path.Join (Path.GetDirectoryName (outputFilePath), "en_US.po");
			ExportDictionaryToPo (localizer.Strings, poDirectory,"en_US");
		} catch (Exception ex) {
			throw new Exception ($"Error writing out POT file {outputFilePath}: " + ex.Message);
		}
	}
}